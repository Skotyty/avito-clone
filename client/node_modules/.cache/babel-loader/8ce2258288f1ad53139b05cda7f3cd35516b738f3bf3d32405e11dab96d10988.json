{"ast":null,"code":"var _jsxFileName = \"/home/skot/projects/avito/client/src/pages/FormPage.js\",\n  _s = $RefreshSig$();\n/* import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FormContainer, FormCard, FormTitle, FormInput, FormButton } from \"../styles/formStyles\";\nimport { MenuItem, Select } from \"@mui/material\";\n\nfunction FormPage() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    location: \"\",\n    type: \"\",\n    propertyType: \"\",\n    area: \"\",\n    rooms: \"\",\n    price: \"\",\n    brand: \"\",\n    model: \"\",\n    year: \"\",\n    mileage: \"\",\n    serviceType: \"\",\n    experience: \"\",\n    cost: \"\",\n    workSchedule: \"\",\n  });\n\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!formData.name.trim() || !formData.description.trim() || !formData.location.trim() || !formData.type) {\n      console.error(\"Заполните все обязательные поля!\");\n      return;\n    }\n\n    // Формируем объект с только нужными данными\n    const requestData = {\n      name: formData.name.trim(),\n      description: formData.description.trim(),\n      location: formData.location.trim(),\n      type: formData.type,\n    };\n\n    if (formData.type === \"Недвижимость\") {\n      requestData.propertyType = formData.propertyType || \"Квартира\";\n      requestData.area = formData.area ? Number(formData.area) : undefined;\n      requestData.rooms = formData.rooms ? Number(formData.rooms) : undefined;\n      requestData.price = formData.price ? Number(formData.price) : undefined;\n    } else if (formData.type === \"Авто\") {\n      requestData.brand = formData.brand || \"Не указано\";\n      requestData.model = formData.model || \"Не указано\";\n      requestData.year = formData.year ? Number(formData.year) : undefined;\n      requestData.mileage = formData.mileage ? Number(formData.mileage) : undefined;\n    } else if (formData.type === \"Услуги\") {\n      requestData.serviceType = formData.serviceType || \"Не указано\";\n      requestData.experience = formData.experience ? Number(formData.experience) : undefined;\n      requestData.cost = formData.cost ? Number(formData.cost) : undefined;\n      requestData.workSchedule = formData.workSchedule || \"Гибкий\";\n    }\n\n    console.log(\"Отправляем данные:\", requestData);\n\n    fetch(\"/items\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(requestData),\n    })\n      .then((res) => {\n        if (!res.ok) {\n          return res.json().then((err) => {\n            throw new Error(`Ошибка ${res.status}: ${err.error || \"Неизвестная ошибка\"}`);\n          });\n        }\n        return res.json();\n      })\n      .then(() => navigate(\"/\"))\n      .catch((error) => console.error(\"Ошибка запроса:\", error));\n  };\n\n  return (\n    <div>\n      <h1>Разместить объявление</h1>\n      <form onSubmit={handleSubmit}>\n        <input name=\"name\" placeholder=\"Название\" onChange={handleChange} required />\n        <textarea name=\"description\" placeholder=\"Описание\" onChange={handleChange} required />\n        <input name=\"location\" placeholder=\"Локация\" onChange={handleChange} required />\n\n        <select name=\"type\" onChange={handleChange} required>\n          <option value=\"\">Выберите категорию</option>\n          <option value=\"Недвижимость\">Недвижимость</option>\n          <option value=\"Авто\">Авто</option>\n          <option value=\"Услуги\">Услуги</option>\n        </select>\n\n     \n        {formData.type === \"Недвижимость\" && (\n          <>\n            <input name=\"propertyType\" placeholder=\"Тип недвижимости\" onChange={handleChange} required />\n            <input name=\"area\" type=\"number\" placeholder=\"Площадь (м²)\" onChange={handleChange} required />\n            <input name=\"rooms\" type=\"number\" placeholder=\"Количество комнат\" onChange={handleChange} required />\n            <input name=\"price\" type=\"number\" placeholder=\"Цена (₽)\" onChange={handleChange} required />\n          </>\n        )}\n\n        {formData.type === \"Авто\" && (\n          <>\n            <input name=\"brand\" placeholder=\"Марка\" onChange={handleChange} required />\n            <input name=\"model\" placeholder=\"Модель\" onChange={handleChange} required />\n            <input name=\"year\" type=\"number\" placeholder=\"Год выпуска\" onChange={handleChange} required />\n            <input name=\"mileage\" type=\"number\" placeholder=\"Пробег (км)\" onChange={handleChange} />\n          </>\n        )}\n\n       \n        {formData.type === \"Услуги\" && (\n          <>\n            <input name=\"serviceType\" placeholder=\"Тип услуги\" onChange={handleChange} required />\n            <input name=\"experience\" type=\"number\" placeholder=\"Опыт (лет)\" onChange={handleChange} required />\n            <input name=\"cost\" type=\"number\" placeholder=\"Стоимость (₽)\" onChange={handleChange} required />\n            <input name=\"workSchedule\" placeholder=\"График работы\" onChange={handleChange} />\n          </>\n        )}\n\n        <button type=\"submit\">Добавить</button>\n      </form>\n    </div>\n  );\n}\n\nexport default FormPage;\n */\n///////////////////////////////////////////////\n/* import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FormContainer, FormCard, FormTitle, FormInput, FormButton } from \"../styles/formStyles\";\nimport { MenuItem, Select } from \"@mui/material\";\n\nfunction FormPage() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    location: \"\",\n    type: \"\",\n    propertyType: \"\",\n    area: \"\",\n    rooms: \"\",\n    price: \"\",\n    brand: \"\",\n    model: \"\",\n    year: \"\",\n    mileage: \"\",\n    serviceType: \"\",\n    experience: \"\",\n    cost: \"\",\n    workSchedule: \"\",\n  });\n\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!formData.name.trim() || !formData.description.trim() || !formData.location.trim() || !formData.type) {\n      console.error(\"Заполните все обязательные поля!\");\n      return;\n    }\n\n    const requestData = {\n      name: formData.name.trim(),\n      description: formData.description.trim(),\n      location: formData.location.trim(),\n      type: formData.type,\n    };\n\n    if (formData.type === \"Недвижимость\") {\n      requestData.propertyType = formData.propertyType || \"Квартира\";\n      requestData.area = formData.area ? Number(formData.area) : undefined;\n      requestData.rooms = formData.rooms ? Number(formData.rooms) : undefined;\n      requestData.price = formData.price ? Number(formData.price) : undefined;\n    } else if (formData.type === \"Авто\") {\n      requestData.brand = formData.brand || \"Не указано\";\n      requestData.model = formData.model || \"Не указано\";\n      requestData.year = formData.year ? Number(formData.year) : undefined;\n      requestData.mileage = formData.mileage ? Number(formData.mileage) : undefined;\n    } else if (formData.type === \"Услуги\") {\n      requestData.serviceType = formData.serviceType || \"Не указано\";\n      requestData.experience = formData.experience ? Number(formData.experience) : undefined;\n      requestData.cost = formData.cost ? Number(formData.cost) : undefined;\n      requestData.workSchedule = formData.workSchedule || \"Гибкий\";\n    }\n\n    console.log(\"Отправляем данные:\", requestData);\n\n    fetch(\"/items\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(requestData),\n    }).then(() => navigate(\"/list\"));\n  };\n\n  return (\n    <FormContainer>\n      <FormCard>\n        <FormTitle variant=\"h5\">Разместить объявление</FormTitle>\n        <form onSubmit={handleSubmit}>\n          <FormInput label=\"Название\" name=\"name\" onChange={handleChange} required />\n          <FormInput label=\"Описание\" name=\"description\" onChange={handleChange} required multiline rows={3} />\n          <FormInput label=\"Локация\" name=\"location\" onChange={handleChange} required />\n\n          <Select fullWidth name=\"type\" value={formData.type} onChange={handleChange} required>\n            <MenuItem value=\"\">Выберите категорию</MenuItem>\n            <MenuItem value=\"Недвижимость\">Недвижимость</MenuItem>\n            <MenuItem value=\"Авто\">Авто</MenuItem>\n            <MenuItem value=\"Услуги\">Услуги</MenuItem>\n          </Select>\n\n          <FormButton type=\"submit\" variant=\"contained\">\n            Добавить\n          </FormButton>\n        </form>\n      </FormCard>\n    </FormContainer>\n  );\n}\n\nexport default FormPage;\n */\n///////////////////////////////////////////\n/* import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FormContainer, FormCard, FormTitle, FormInput, FormButton } from \"../styles/formStyles\";\nimport { MenuItem, Select, Typography } from \"@mui/material\";\n\nfunction FormPage() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    location: \"\",\n    type: \"\",\n    propertyType: \"\",\n    area: \"\",\n    rooms: \"\",\n    price: \"\",\n    brand: \"\",\n    model: \"\",\n    year: \"\",\n    mileage: \"\",\n    serviceType: \"\",\n    experience: \"\",\n    cost: \"\",\n    workSchedule: \"\",\n  });\n\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!formData.name.trim() || !formData.description.trim() || !formData.location.trim() || !formData.type) {\n      console.error(\"Заполните все обязательные поля!\");\n      return;\n    }\n\n    const requestData = { ...formData };\n\n    console.log(\"Отправляем данные:\", requestData);\n\n    fetch(\"/items\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(requestData),\n    }).then(() => navigate(\"/list\"));\n  };\n\n  return (\n    <FormContainer>\n      <FormCard>\n        <FormTitle variant=\"h5\">Разместить объявление</FormTitle>\n        <form onSubmit={handleSubmit}>\n          <FormInput label=\"Название\" name=\"name\" onChange={handleChange} required />\n          <FormInput label=\"Описание\" name=\"description\" onChange={handleChange} required multiline rows={3} />\n          <FormInput label=\"Локация\" name=\"location\" onChange={handleChange} required />\n\n          //{ Выбор категории }\n          <Select fullWidth name=\"type\" value={formData.type} onChange={handleChange} required>\n            <MenuItem value=\"\">Выберите категорию</MenuItem>\n            <MenuItem value=\"Недвижимость\">Недвижимость</MenuItem>\n            <MenuItem value=\"Авто\">Авто</MenuItem>\n            <MenuItem value=\"Услуги\">Услуги</MenuItem>\n          </Select>\n\n          //{ Поля для недвижимости }\n          {formData.type === \"Недвижимость\" && (\n            <>\n              <FormInput label=\"Тип недвижимости\" name=\"propertyType\" onChange={handleChange} required />\n              <FormInput label=\"Площадь (м²)\" name=\"area\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"Количество комнат\" name=\"rooms\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"Цена (₽)\" name=\"price\" type=\"number\" onChange={handleChange} required />\n            </>\n          )}\n\n          //{ Поля для авто }\n          {formData.type === \"Авто\" && (\n            <>\n              <FormInput label=\"Марка\" name=\"brand\" onChange={handleChange} required />\n              <FormInput label=\"Модель\" name=\"model\" onChange={handleChange} required />\n              <FormInput label=\"Год выпуска\" name=\"year\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"Пробег (км)\" name=\"mileage\" type=\"number\" onChange={handleChange} />\n            </>\n          )}\n\n          //{ Поля для услуг }\n          {formData.type === \"Услуги\" && (\n            <>\n              <FormInput label=\"Тип услуги\" name=\"serviceType\" onChange={handleChange} required />\n              <FormInput label=\"Опыт (лет)\" name=\"experience\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"Стоимость (₽)\" name=\"cost\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"График работы\" name=\"workSchedule\" onChange={handleChange} />\n            </>\n          )}\n\n          <FormButton type=\"submit\" variant=\"contained\">\n            Добавить\n          </FormButton>\n        </form>\n      </FormCard>\n    </FormContainer>\n  );\n}\n\nexport default FormPage;\n */\n\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { FormContainer, FormCard, FormTitle, FormButton } from \"../styles/formStyles\";\n// import { BaseFields } from \"../components/BaseFields\";\n// import { RealEstateFields, AutoFields, ServiceFields } from \"../components/AdditionalFields\";\n\n// function FormPage() {\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     location: \"\",\n//     type: \"\",\n//   });\n\n//   const navigate = useNavigate();\n\n//   const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     fetch(\"/items\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(formData),\n//     }).then(() => navigate(\"/list\"));\n//   };\n\n//   return (\n//     <FormContainer>\n//       <FormCard>\n//         <FormTitle variant=\"h5\">Разместить объявление</FormTitle>\n//         <form onSubmit={handleSubmit}>\n//           {/* 🔹 Общие поля */}\n//           <BaseFields formData={formData} handleChange={handleChange} />\n\n//           {/* 🔹 Специфичные поля для категорий */}\n//           {formData.type === \"Недвижимость\" && <RealEstateFields formData={formData} handleChange={handleChange} />}\n//           {formData.type === \"Авто\" && <AutoFields formData={formData} handleChange={handleChange} />}\n//           {formData.type === \"Услуги\" && <ServiceFields formData={formData} handleChange={handleChange} />}\n\n//           <FormButton type=\"submit\" variant=\"contained\">Добавить</FormButton>\n//         </form>\n//       </FormCard>\n//     </FormContainer>\n//   );\n// }\n\n// export default FormPage;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import { FormContainer, FormCard, FormTitle, FormButton } from \"../styles/formStyles\";\n// import { BaseFields } from \"../components/BaseFields\";\n// import { RealEstateFields, AutoFields, ServiceFields } from \"../components/AdditionalFields\";\n\n// function FormPage() {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const existingData = location.state?.itemData || null; // 🔹 Получаем переданные данные (если есть)\n\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     location: \"\",\n//     type: \"\",\n//     propertyType: \"\",\n//     area: \"\",\n//     rooms: \"\",\n//     price: \"\",\n//     brand: \"\",\n//     model: \"\",\n//     year: \"\",\n//     mileage: \"\",\n//     serviceType: \"\",\n//     experience: \"\",\n//     cost: \"\",\n//     workSchedule: \"\",\n//   });\n\n//   // 🔹 При загрузке страницы проверяем, есть ли данные для редактирования\n//   useEffect(() => {\n//     if (existingData) {\n//       setFormData(existingData);\n//     }\n//   }, [existingData]);\n\n//   const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     const method = existingData ? \"PUT\" : \"POST\";\n//     const url = existingData ? `/items/${existingData.id}` : \"/items\";\n\n//     fetch(url, {\n//       method,\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(formData),\n//     }).then(() => navigate(\"/list\"));\n//   };\n\n//   return (\n//     <FormContainer>\n//       <FormCard>\n//         <FormTitle variant=\"h5\">{existingData ? \"Редактировать объявление\" : \"Разместить объявление\"}</FormTitle>\n//         <form onSubmit={handleSubmit}>\n//           <BaseFields formData={formData} handleChange={handleChange} />\n\n//           {formData.type === \"Недвижимость\" && <RealEstateFields formData={formData} handleChange={handleChange} />}\n//           {formData.type === \"Авто\" && <AutoFields formData={formData} handleChange={handleChange} />}\n//           {formData.type === \"Услуги\" && <ServiceFields formData={formData} handleChange={handleChange} />}\n\n//           <FormButton type=\"submit\" variant=\"contained\">\n//             {existingData ? \"Сохранить изменения\" : \"Добавить\"}\n//           </FormButton>\n//         </form>\n//       </FormCard>\n//     </FormContainer>\n//   );\n// }\n\n// export default FormPage;\n\n///////////////////\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { FormContainer, FormCard } from \"../styles/formStyles\";\nimport { BaseFields } from \"../components/BaseFields\";\nimport { RealEstateFields, AutoFields, ServiceFields } from \"../components/AdditionalFields\";\nimport FormHeader from \"../components/FormHeader\";\nimport FormSubmitButton from \"../components/FormSubmitButton\";\nimport FormImageUploader from \"../components/FormImageUploader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FormPage() {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const existingData = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.itemData) || null;\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    location: \"\",\n    type: \"\",\n    image: \"\"\n  });\n  const [imageFile, setImageFile] = useState(null);\n  useEffect(() => {\n    if (existingData) {\n      setFormData(existingData);\n    }\n  }, [existingData]);\n  const handleChange = e => setFormData({\n    ...formData,\n    [e.target.name]: e.target.value\n  });\n  const handleFileChange = e => {\n    setImageFile(e.target.files[0]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let imageUrl = formData.image;\n    if (imageFile) {\n      const formDataImage = new FormData();\n      formDataImage.append(\"image\", imageFile);\n      const response = await fetch(\"/upload\", {\n        method: \"POST\",\n        body: formDataImage\n      });\n      const data = await response.json();\n      imageUrl = data.imageUrl;\n    }\n    const method = existingData ? \"PUT\" : \"POST\";\n    const url = existingData ? `/items/${existingData.id}` : \"/items\";\n    fetch(url, {\n      method,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ...formData,\n        image: imageUrl\n      })\n    }).then(() => navigate(\"/list\"));\n  };\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    children: /*#__PURE__*/_jsxDEV(FormCard, {\n      children: [/*#__PURE__*/_jsxDEV(FormHeader, {\n        isEdit: !!existingData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(BaseFields, {\n          formData: formData,\n          handleChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormImageUploader, {\n          handleFileChange: handleFileChange,\n          preview: formData.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }, this), formData.type === \"Недвижимость\" && /*#__PURE__*/_jsxDEV(RealEstateFields, {\n          formData: formData,\n          handleChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 48\n        }, this), formData.type === \"Авто\" && /*#__PURE__*/_jsxDEV(AutoFields, {\n          formData: formData,\n          handleChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 40\n        }, this), formData.type === \"Услуги\" && /*#__PURE__*/_jsxDEV(ServiceFields, {\n          formData: formData,\n          handleChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 42\n        }, this), /*#__PURE__*/_jsxDEV(FormSubmitButton, {\n          isEdit: !!existingData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 539,\n    columnNumber: 5\n  }, this);\n}\n_s(FormPage, \"c15tCx6stPMcbb2rho3XBpVsAgI=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = FormPage;\nexport default FormPage;\nvar _c;\n$RefreshReg$(_c, \"FormPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","FormContainer","FormCard","BaseFields","RealEstateFields","AutoFields","ServiceFields","FormHeader","FormSubmitButton","FormImageUploader","jsxDEV","_jsxDEV","FormPage","_s","_location$state","navigate","location","existingData","state","itemData","formData","setFormData","name","description","type","image","imageFile","setImageFile","handleChange","e","target","value","handleFileChange","files","handleSubmit","preventDefault","imageUrl","formDataImage","FormData","append","response","fetch","method","body","data","json","url","id","headers","JSON","stringify","then","children","isEdit","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","preview","_c","$RefreshReg$"],"sources":["/home/skot/projects/avito/client/src/pages/FormPage.js"],"sourcesContent":["/* import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FormContainer, FormCard, FormTitle, FormInput, FormButton } from \"../styles/formStyles\";\nimport { MenuItem, Select } from \"@mui/material\";\n\nfunction FormPage() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    location: \"\",\n    type: \"\",\n    propertyType: \"\",\n    area: \"\",\n    rooms: \"\",\n    price: \"\",\n    brand: \"\",\n    model: \"\",\n    year: \"\",\n    mileage: \"\",\n    serviceType: \"\",\n    experience: \"\",\n    cost: \"\",\n    workSchedule: \"\",\n  });\n\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!formData.name.trim() || !formData.description.trim() || !formData.location.trim() || !formData.type) {\n      console.error(\"Заполните все обязательные поля!\");\n      return;\n    }\n\n    // Формируем объект с только нужными данными\n    const requestData = {\n      name: formData.name.trim(),\n      description: formData.description.trim(),\n      location: formData.location.trim(),\n      type: formData.type,\n    };\n\n    if (formData.type === \"Недвижимость\") {\n      requestData.propertyType = formData.propertyType || \"Квартира\";\n      requestData.area = formData.area ? Number(formData.area) : undefined;\n      requestData.rooms = formData.rooms ? Number(formData.rooms) : undefined;\n      requestData.price = formData.price ? Number(formData.price) : undefined;\n    } else if (formData.type === \"Авто\") {\n      requestData.brand = formData.brand || \"Не указано\";\n      requestData.model = formData.model || \"Не указано\";\n      requestData.year = formData.year ? Number(formData.year) : undefined;\n      requestData.mileage = formData.mileage ? Number(formData.mileage) : undefined;\n    } else if (formData.type === \"Услуги\") {\n      requestData.serviceType = formData.serviceType || \"Не указано\";\n      requestData.experience = formData.experience ? Number(formData.experience) : undefined;\n      requestData.cost = formData.cost ? Number(formData.cost) : undefined;\n      requestData.workSchedule = formData.workSchedule || \"Гибкий\";\n    }\n\n    console.log(\"Отправляем данные:\", requestData);\n\n    fetch(\"/items\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(requestData),\n    })\n      .then((res) => {\n        if (!res.ok) {\n          return res.json().then((err) => {\n            throw new Error(`Ошибка ${res.status}: ${err.error || \"Неизвестная ошибка\"}`);\n          });\n        }\n        return res.json();\n      })\n      .then(() => navigate(\"/\"))\n      .catch((error) => console.error(\"Ошибка запроса:\", error));\n  };\n\n  return (\n    <div>\n      <h1>Разместить объявление</h1>\n      <form onSubmit={handleSubmit}>\n        <input name=\"name\" placeholder=\"Название\" onChange={handleChange} required />\n        <textarea name=\"description\" placeholder=\"Описание\" onChange={handleChange} required />\n        <input name=\"location\" placeholder=\"Локация\" onChange={handleChange} required />\n\n        <select name=\"type\" onChange={handleChange} required>\n          <option value=\"\">Выберите категорию</option>\n          <option value=\"Недвижимость\">Недвижимость</option>\n          <option value=\"Авто\">Авто</option>\n          <option value=\"Услуги\">Услуги</option>\n        </select>\n\n     \n        {formData.type === \"Недвижимость\" && (\n          <>\n            <input name=\"propertyType\" placeholder=\"Тип недвижимости\" onChange={handleChange} required />\n            <input name=\"area\" type=\"number\" placeholder=\"Площадь (м²)\" onChange={handleChange} required />\n            <input name=\"rooms\" type=\"number\" placeholder=\"Количество комнат\" onChange={handleChange} required />\n            <input name=\"price\" type=\"number\" placeholder=\"Цена (₽)\" onChange={handleChange} required />\n          </>\n        )}\n\n        {formData.type === \"Авто\" && (\n          <>\n            <input name=\"brand\" placeholder=\"Марка\" onChange={handleChange} required />\n            <input name=\"model\" placeholder=\"Модель\" onChange={handleChange} required />\n            <input name=\"year\" type=\"number\" placeholder=\"Год выпуска\" onChange={handleChange} required />\n            <input name=\"mileage\" type=\"number\" placeholder=\"Пробег (км)\" onChange={handleChange} />\n          </>\n        )}\n\n       \n        {formData.type === \"Услуги\" && (\n          <>\n            <input name=\"serviceType\" placeholder=\"Тип услуги\" onChange={handleChange} required />\n            <input name=\"experience\" type=\"number\" placeholder=\"Опыт (лет)\" onChange={handleChange} required />\n            <input name=\"cost\" type=\"number\" placeholder=\"Стоимость (₽)\" onChange={handleChange} required />\n            <input name=\"workSchedule\" placeholder=\"График работы\" onChange={handleChange} />\n          </>\n        )}\n\n        <button type=\"submit\">Добавить</button>\n      </form>\n    </div>\n  );\n}\n\nexport default FormPage;\n */\n///////////////////////////////////////////////\n/* import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FormContainer, FormCard, FormTitle, FormInput, FormButton } from \"../styles/formStyles\";\nimport { MenuItem, Select } from \"@mui/material\";\n\nfunction FormPage() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    location: \"\",\n    type: \"\",\n    propertyType: \"\",\n    area: \"\",\n    rooms: \"\",\n    price: \"\",\n    brand: \"\",\n    model: \"\",\n    year: \"\",\n    mileage: \"\",\n    serviceType: \"\",\n    experience: \"\",\n    cost: \"\",\n    workSchedule: \"\",\n  });\n\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!formData.name.trim() || !formData.description.trim() || !formData.location.trim() || !formData.type) {\n      console.error(\"Заполните все обязательные поля!\");\n      return;\n    }\n\n    const requestData = {\n      name: formData.name.trim(),\n      description: formData.description.trim(),\n      location: formData.location.trim(),\n      type: formData.type,\n    };\n\n    if (formData.type === \"Недвижимость\") {\n      requestData.propertyType = formData.propertyType || \"Квартира\";\n      requestData.area = formData.area ? Number(formData.area) : undefined;\n      requestData.rooms = formData.rooms ? Number(formData.rooms) : undefined;\n      requestData.price = formData.price ? Number(formData.price) : undefined;\n    } else if (formData.type === \"Авто\") {\n      requestData.brand = formData.brand || \"Не указано\";\n      requestData.model = formData.model || \"Не указано\";\n      requestData.year = formData.year ? Number(formData.year) : undefined;\n      requestData.mileage = formData.mileage ? Number(formData.mileage) : undefined;\n    } else if (formData.type === \"Услуги\") {\n      requestData.serviceType = formData.serviceType || \"Не указано\";\n      requestData.experience = formData.experience ? Number(formData.experience) : undefined;\n      requestData.cost = formData.cost ? Number(formData.cost) : undefined;\n      requestData.workSchedule = formData.workSchedule || \"Гибкий\";\n    }\n\n    console.log(\"Отправляем данные:\", requestData);\n\n    fetch(\"/items\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(requestData),\n    }).then(() => navigate(\"/list\"));\n  };\n\n  return (\n    <FormContainer>\n      <FormCard>\n        <FormTitle variant=\"h5\">Разместить объявление</FormTitle>\n        <form onSubmit={handleSubmit}>\n          <FormInput label=\"Название\" name=\"name\" onChange={handleChange} required />\n          <FormInput label=\"Описание\" name=\"description\" onChange={handleChange} required multiline rows={3} />\n          <FormInput label=\"Локация\" name=\"location\" onChange={handleChange} required />\n\n          <Select fullWidth name=\"type\" value={formData.type} onChange={handleChange} required>\n            <MenuItem value=\"\">Выберите категорию</MenuItem>\n            <MenuItem value=\"Недвижимость\">Недвижимость</MenuItem>\n            <MenuItem value=\"Авто\">Авто</MenuItem>\n            <MenuItem value=\"Услуги\">Услуги</MenuItem>\n          </Select>\n\n          <FormButton type=\"submit\" variant=\"contained\">\n            Добавить\n          </FormButton>\n        </form>\n      </FormCard>\n    </FormContainer>\n  );\n}\n\nexport default FormPage;\n */\n///////////////////////////////////////////\n/* import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FormContainer, FormCard, FormTitle, FormInput, FormButton } from \"../styles/formStyles\";\nimport { MenuItem, Select, Typography } from \"@mui/material\";\n\nfunction FormPage() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    location: \"\",\n    type: \"\",\n    propertyType: \"\",\n    area: \"\",\n    rooms: \"\",\n    price: \"\",\n    brand: \"\",\n    model: \"\",\n    year: \"\",\n    mileage: \"\",\n    serviceType: \"\",\n    experience: \"\",\n    cost: \"\",\n    workSchedule: \"\",\n  });\n\n  const navigate = useNavigate();\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!formData.name.trim() || !formData.description.trim() || !formData.location.trim() || !formData.type) {\n      console.error(\"Заполните все обязательные поля!\");\n      return;\n    }\n\n    const requestData = { ...formData };\n\n    console.log(\"Отправляем данные:\", requestData);\n\n    fetch(\"/items\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(requestData),\n    }).then(() => navigate(\"/list\"));\n  };\n\n  return (\n    <FormContainer>\n      <FormCard>\n        <FormTitle variant=\"h5\">Разместить объявление</FormTitle>\n        <form onSubmit={handleSubmit}>\n          <FormInput label=\"Название\" name=\"name\" onChange={handleChange} required />\n          <FormInput label=\"Описание\" name=\"description\" onChange={handleChange} required multiline rows={3} />\n          <FormInput label=\"Локация\" name=\"location\" onChange={handleChange} required />\n\n          //{ Выбор категории }\n          <Select fullWidth name=\"type\" value={formData.type} onChange={handleChange} required>\n            <MenuItem value=\"\">Выберите категорию</MenuItem>\n            <MenuItem value=\"Недвижимость\">Недвижимость</MenuItem>\n            <MenuItem value=\"Авто\">Авто</MenuItem>\n            <MenuItem value=\"Услуги\">Услуги</MenuItem>\n          </Select>\n\n          //{ Поля для недвижимости }\n          {formData.type === \"Недвижимость\" && (\n            <>\n              <FormInput label=\"Тип недвижимости\" name=\"propertyType\" onChange={handleChange} required />\n              <FormInput label=\"Площадь (м²)\" name=\"area\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"Количество комнат\" name=\"rooms\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"Цена (₽)\" name=\"price\" type=\"number\" onChange={handleChange} required />\n            </>\n          )}\n\n          //{ Поля для авто }\n          {formData.type === \"Авто\" && (\n            <>\n              <FormInput label=\"Марка\" name=\"brand\" onChange={handleChange} required />\n              <FormInput label=\"Модель\" name=\"model\" onChange={handleChange} required />\n              <FormInput label=\"Год выпуска\" name=\"year\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"Пробег (км)\" name=\"mileage\" type=\"number\" onChange={handleChange} />\n            </>\n          )}\n\n          //{ Поля для услуг }\n          {formData.type === \"Услуги\" && (\n            <>\n              <FormInput label=\"Тип услуги\" name=\"serviceType\" onChange={handleChange} required />\n              <FormInput label=\"Опыт (лет)\" name=\"experience\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"Стоимость (₽)\" name=\"cost\" type=\"number\" onChange={handleChange} required />\n              <FormInput label=\"График работы\" name=\"workSchedule\" onChange={handleChange} />\n            </>\n          )}\n\n          <FormButton type=\"submit\" variant=\"contained\">\n            Добавить\n          </FormButton>\n        </form>\n      </FormCard>\n    </FormContainer>\n  );\n}\n\nexport default FormPage;\n */\n\n// import React, { useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import { FormContainer, FormCard, FormTitle, FormButton } from \"../styles/formStyles\";\n// import { BaseFields } from \"../components/BaseFields\";\n// import { RealEstateFields, AutoFields, ServiceFields } from \"../components/AdditionalFields\";\n\n// function FormPage() {\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     location: \"\",\n//     type: \"\",\n//   });\n\n//   const navigate = useNavigate();\n\n//   const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     fetch(\"/items\", {\n//       method: \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(formData),\n//     }).then(() => navigate(\"/list\"));\n//   };\n\n//   return (\n//     <FormContainer>\n//       <FormCard>\n//         <FormTitle variant=\"h5\">Разместить объявление</FormTitle>\n//         <form onSubmit={handleSubmit}>\n//           {/* 🔹 Общие поля */}\n//           <BaseFields formData={formData} handleChange={handleChange} />\n\n//           {/* 🔹 Специфичные поля для категорий */}\n//           {formData.type === \"Недвижимость\" && <RealEstateFields formData={formData} handleChange={handleChange} />}\n//           {formData.type === \"Авто\" && <AutoFields formData={formData} handleChange={handleChange} />}\n//           {formData.type === \"Услуги\" && <ServiceFields formData={formData} handleChange={handleChange} />}\n\n//           <FormButton type=\"submit\" variant=\"contained\">Добавить</FormButton>\n//         </form>\n//       </FormCard>\n//     </FormContainer>\n//   );\n// }\n\n// export default FormPage;\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import { FormContainer, FormCard, FormTitle, FormButton } from \"../styles/formStyles\";\n// import { BaseFields } from \"../components/BaseFields\";\n// import { RealEstateFields, AutoFields, ServiceFields } from \"../components/AdditionalFields\";\n\n// function FormPage() {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const existingData = location.state?.itemData || null; // 🔹 Получаем переданные данные (если есть)\n\n//   const [formData, setFormData] = useState({\n//     name: \"\",\n//     description: \"\",\n//     location: \"\",\n//     type: \"\",\n//     propertyType: \"\",\n//     area: \"\",\n//     rooms: \"\",\n//     price: \"\",\n//     brand: \"\",\n//     model: \"\",\n//     year: \"\",\n//     mileage: \"\",\n//     serviceType: \"\",\n//     experience: \"\",\n//     cost: \"\",\n//     workSchedule: \"\",\n//   });\n\n//   // 🔹 При загрузке страницы проверяем, есть ли данные для редактирования\n//   useEffect(() => {\n//     if (existingData) {\n//       setFormData(existingData);\n//     }\n//   }, [existingData]);\n\n//   const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     const method = existingData ? \"PUT\" : \"POST\";\n//     const url = existingData ? `/items/${existingData.id}` : \"/items\";\n\n//     fetch(url, {\n//       method,\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(formData),\n//     }).then(() => navigate(\"/list\"));\n//   };\n\n//   return (\n//     <FormContainer>\n//       <FormCard>\n//         <FormTitle variant=\"h5\">{existingData ? \"Редактировать объявление\" : \"Разместить объявление\"}</FormTitle>\n//         <form onSubmit={handleSubmit}>\n//           <BaseFields formData={formData} handleChange={handleChange} />\n\n//           {formData.type === \"Недвижимость\" && <RealEstateFields formData={formData} handleChange={handleChange} />}\n//           {formData.type === \"Авто\" && <AutoFields formData={formData} handleChange={handleChange} />}\n//           {formData.type === \"Услуги\" && <ServiceFields formData={formData} handleChange={handleChange} />}\n\n//           <FormButton type=\"submit\" variant=\"contained\">\n//             {existingData ? \"Сохранить изменения\" : \"Добавить\"}\n//           </FormButton>\n//         </form>\n//       </FormCard>\n//     </FormContainer>\n//   );\n// }\n\n// export default FormPage;\n\n///////////////////\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { FormContainer, FormCard } from \"../styles/formStyles\";\nimport { BaseFields } from \"../components/BaseFields\";\nimport { RealEstateFields, AutoFields, ServiceFields } from \"../components/AdditionalFields\";\nimport FormHeader from \"../components/FormHeader\";\nimport FormSubmitButton from \"../components/FormSubmitButton\";\nimport FormImageUploader from \"../components/FormImageUploader\";\n\nfunction FormPage() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const existingData = location.state?.itemData || null;\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    location: \"\",\n    type: \"\",\n    image: \"\",\n  });\n\n  const [imageFile, setImageFile] = useState(null);\n\n  useEffect(() => {\n    if (existingData) {\n      setFormData(existingData);\n    }\n  }, [existingData]);\n\n  const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const handleFileChange = (e) => {\n    setImageFile(e.target.files[0]);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    let imageUrl = formData.image;\n\n    if (imageFile) {\n      const formDataImage = new FormData();\n      formDataImage.append(\"image\", imageFile);\n\n      const response = await fetch(\"/upload\", {\n        method: \"POST\",\n        body: formDataImage,\n      });\n\n      const data = await response.json();\n      imageUrl = data.imageUrl;\n    }\n\n    const method = existingData ? \"PUT\" : \"POST\";\n    const url = existingData ? `/items/${existingData.id}` : \"/items\";\n\n    fetch(url, {\n      method,\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...formData, image: imageUrl }),\n    }).then(() => navigate(\"/list\"));\n  };\n\n  return (\n    <FormContainer>\n      <FormCard>\n        <FormHeader isEdit={!!existingData} />\n        <form onSubmit={handleSubmit}>\n          <BaseFields formData={formData} handleChange={handleChange} />\n\n          <FormImageUploader handleFileChange={handleFileChange} preview={formData.image} />\n\n          {formData.type === \"Недвижимость\" && <RealEstateFields formData={formData} handleChange={handleChange} />}\n          {formData.type === \"Авто\" && <AutoFields formData={formData} handleChange={handleChange} />}\n          {formData.type === \"Услуги\" && <ServiceFields formData={formData} handleChange={handleChange} />}\n\n          <FormSubmitButton isEdit={!!existingData} />\n        </form>\n      </FormCard>\n    </FormContainer>\n  );\n}\n\nexport default FormPage;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}