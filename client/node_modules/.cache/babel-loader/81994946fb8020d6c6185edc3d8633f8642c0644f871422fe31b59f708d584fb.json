{"ast":null,"code":"var _jsxFileName = \"/home/skot/projects/avito/client/src/pages/ItemPage.js\",\n  _s = $RefreshSig$();\n/* import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ItemContainer, ItemCard, ItemTitle, EditButton } from \"../styles/itemStyles\";\nimport { Typography } from \"@mui/material\";\n\nfunction ItemPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [item, setItem] = useState(null);\n\n  useEffect(() => {\n    fetch(`/items/${id}`)\n      .then((res) => res.json())\n      .then((data) => setItem(data));\n  }, [id]);\n\n  const handleEdit = () => {\n    navigate(`/form?edit=${id}`);\n  };\n\n  if (!item) return <Typography align=\"center\">Загрузка...</Typography>;\n\n  return (\n    <ItemContainer>\n      <ItemCard>\n        <ItemTitle>{item.name}</ItemTitle>\n        <Typography>{item.description}</Typography>\n        <Typography color=\"text.secondary\">Категория: {item.type}</Typography>\n\n        <EditButton variant=\"contained\" onClick={handleEdit}>\n          Редактировать\n        </EditButton>\n      </ItemCard>\n    </ItemContainer>\n  );\n}\n\nexport default ItemPage;\n */\n////////////////////////////////////////////////\n/* import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ItemContainer, ItemCard, ItemTitle, EditButton } from \"../styles/itemStyles\";\nimport { Typography, TextField, Button, Select, MenuItem } from \"@mui/material\";\n\nfunction ItemPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [item, setItem] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({});\n\n  useEffect(() => {\n    fetch(`/items/${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        setItem(data);\n        setFormData(data);\n      });\n  }, [id]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setFormData(item); // Отменяем изменения\n  };\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSave = () => {\n    fetch(`/items/${id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData),\n    })\n      .then((res) => res.json())\n      .then((updatedItem) => {\n        setItem(updatedItem);\n        setIsEditing(false);\n      });\n  };\n\n  if (!item) return <Typography align=\"center\">Загрузка...</Typography>;\n\n  return (\n    <ItemContainer>\n      <ItemCard>\n        {isEditing ? (\n          <>\n            <TextField fullWidth label=\"Название\" name=\"name\" value={formData.name} onChange={handleChange} required />\n            <TextField\n              fullWidth\n              label=\"Описание\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              multiline\n              rows={3}\n              required\n            />\n            <TextField fullWidth label=\"Локация\" name=\"location\" value={formData.location} onChange={handleChange} required />\n\n            <Select fullWidth name=\"type\" value={formData.type} onChange={handleChange} required>\n              <MenuItem value=\"Недвижимость\">Недвижимость</MenuItem>\n              <MenuItem value=\"Авто\">Авто</MenuItem>\n              <MenuItem value=\"Услуги\">Услуги</MenuItem>\n            </Select>\n\n            {formData.type === \"Недвижимость\" && (\n              <>\n                <TextField fullWidth label=\"Тип недвижимости\" name=\"propertyType\" value={formData.propertyType} onChange={handleChange} />\n                <TextField fullWidth label=\"Площадь (м²)\" name=\"area\" type=\"number\" value={formData.area} onChange={handleChange} />\n                <TextField fullWidth label=\"Количество комнат\" name=\"rooms\" type=\"number\" value={formData.rooms} onChange={handleChange} />\n                <TextField fullWidth label=\"Цена (₽)\" name=\"price\" type=\"number\" value={formData.price} onChange={handleChange} />\n              </>\n            )}\n\n            {formData.type === \"Авто\" && (\n              <>\n                <TextField fullWidth label=\"Марка\" name=\"brand\" value={formData.brand} onChange={handleChange} />\n                <TextField fullWidth label=\"Модель\" name=\"model\" value={formData.model} onChange={handleChange} />\n                <TextField fullWidth label=\"Год выпуска\" name=\"year\" type=\"number\" value={formData.year} onChange={handleChange} />\n                <TextField fullWidth label=\"Пробег (км)\" name=\"mileage\" type=\"number\" value={formData.mileage} onChange={handleChange} />\n              </>\n            )}\n\n            {formData.type === \"Услуги\" && (\n              <>\n                <TextField fullWidth label=\"Тип услуги\" name=\"serviceType\" value={formData.serviceType} onChange={handleChange} />\n                <TextField fullWidth label=\"Опыт (лет)\" name=\"experience\" type=\"number\" value={formData.experience} onChange={handleChange} />\n                <TextField fullWidth label=\"Стоимость (₽)\" name=\"cost\" type=\"number\" value={formData.cost} onChange={handleChange} />\n                <TextField fullWidth label=\"График работы\" name=\"workSchedule\" value={formData.workSchedule} onChange={handleChange} />\n              </>\n            )}\n\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\n              Сохранить\n            </Button>\n            <Button variant=\"outlined\" color=\"secondary\" onClick={handleCancel} sx={{ ml: 1 }}>\n              Отмена\n            </Button>\n          </>\n        ) : (\n          <>\n            <ItemTitle>{item.name}</ItemTitle>\n            <Typography>{item.description}</Typography>\n            <Typography color=\"text.secondary\">Категория: {item.type}</Typography>\n\n            {item.type === \"Недвижимость\" && (\n              <>\n                <Typography>Тип: {item.propertyType}</Typography>\n                <Typography>Площадь: {item.area} м²</Typography>\n                <Typography>Комнат: {item.rooms}</Typography>\n                <Typography>Цена: {item.price} ₽</Typography>\n              </>\n            )}\n\n            {item.type === \"Авто\" && (\n              <>\n                <Typography>Марка: {item.brand}</Typography>\n                <Typography>Модель: {item.model}</Typography>\n                <Typography>Год: {item.year}</Typography>\n                <Typography>Пробег: {item.mileage} км</Typography>\n              </>\n            )}\n\n            {item.type === \"Услуги\" && (\n              <>\n                <Typography>Тип услуги: {item.serviceType}</Typography>\n                <Typography>Опыт: {item.experience} лет</Typography>\n                <Typography>Стоимость: {item.cost} ₽</Typography>\n                <Typography>График: {item.workSchedule}</Typography>\n              </>\n            )}\n\n            <EditButton variant=\"contained\" onClick={handleEdit}>\n              Редактировать\n            </EditButton>\n          </>\n        )}\n      </ItemCard>\n    </ItemContainer>\n  );\n}\n\nexport default ItemPage;\n */\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ItemContainer, ItemCard, ItemTitle, StyledButton } from \"../styles/itemStyles\";\nimport { Typography } from \"@mui/material\";\nimport { BaseFields } from \"../components/BaseFields\";\nimport { RealEstateFields, AutoFields, ServiceFields } from \"../components/AdditionalFields\";\nimport { ActionButtons } from \"../components/ActionButtons\";\nimport { EditItemButton } from \"../components/EditButton\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ItemPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [item, setItem] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({});\n  useEffect(() => {\n    fetch(`/items/${id}`).then(res => res.json()).then(data => {\n      setItem(data);\n      setFormData(data);\n    });\n  }, [id]);\n  const handleEdit = () => setIsEditing(true);\n  const handleCancel = () => {\n    setIsEditing(false);\n    setFormData(item);\n  };\n  const handleChange = e => setFormData({\n    ...formData,\n    [e.target.name]: e.target.value\n  });\n  const handleSave = () => {\n    fetch(`/items/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    }).then(res => res.json()).then(updatedItem => {\n      setItem(updatedItem);\n      setIsEditing(false);\n    });\n  };\n  if (!item) return /*#__PURE__*/_jsxDEV(Typography, {\n    align: \"center\",\n    children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ItemContainer, {\n    children: /*#__PURE__*/_jsxDEV(ItemCard, {\n      children: isEditing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(BaseFields, {\n          formData: formData,\n          handleChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), formData.type === \"Недвижимость\" && /*#__PURE__*/_jsxDEV(RealEstateFields, {\n          formData: formData,\n          handleChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 50\n        }, this), formData.type === \"Авто\" && /*#__PURE__*/_jsxDEV(AutoFields, {\n          formData: formData,\n          handleChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 42\n        }, this), formData.type === \"Услуги\" && /*#__PURE__*/_jsxDEV(ServiceFields, {\n          formData: formData,\n          handleChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 44\n        }, this), /*#__PURE__*/_jsxDEV(ActionButtons, {\n          handleSave: handleSave,\n          handleCancel: handleCancel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ItemTitle, {\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: item.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"text.secondary\",\n          children: [\"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u044F: \", item.type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this), item.type === \"Недвижимость\" && /*#__PURE__*/_jsxDEV(RealEstateFields, {\n          formData: item,\n          handleChange: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 46\n        }, this), item.type === \"Авто\" && /*#__PURE__*/_jsxDEV(AutoFields, {\n          formData: item,\n          handleChange: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 38\n        }, this), item.type === \"Услуги\" && /*#__PURE__*/_jsxDEV(ServiceFields, {\n          formData: item,\n          handleChange: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 40\n        }, this), /*#__PURE__*/_jsxDEV(EditItemButton, {\n          handleEdit: handleEdit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n}\n_s(ItemPage, \"KRKK2FZOnsGlMGjEezChJeYcq+M=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ItemPage;\nexport default ItemPage;\nvar _c;\n$RefreshReg$(_c, \"ItemPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","ItemContainer","ItemCard","ItemTitle","StyledButton","Typography","BaseFields","RealEstateFields","AutoFields","ServiceFields","ActionButtons","EditItemButton","jsxDEV","_jsxDEV","Fragment","_Fragment","ItemPage","_s","id","navigate","item","setItem","isEditing","setIsEditing","formData","setFormData","fetch","then","res","json","data","handleEdit","handleCancel","handleChange","e","target","name","value","handleSave","method","headers","body","JSON","stringify","updatedItem","align","children","fileName","_jsxFileName","lineNumber","columnNumber","type","description","color","_c","$RefreshReg$"],"sources":["/home/skot/projects/avito/client/src/pages/ItemPage.js"],"sourcesContent":["/* import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ItemContainer, ItemCard, ItemTitle, EditButton } from \"../styles/itemStyles\";\nimport { Typography } from \"@mui/material\";\n\nfunction ItemPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [item, setItem] = useState(null);\n\n  useEffect(() => {\n    fetch(`/items/${id}`)\n      .then((res) => res.json())\n      .then((data) => setItem(data));\n  }, [id]);\n\n  const handleEdit = () => {\n    navigate(`/form?edit=${id}`);\n  };\n\n  if (!item) return <Typography align=\"center\">Загрузка...</Typography>;\n\n  return (\n    <ItemContainer>\n      <ItemCard>\n        <ItemTitle>{item.name}</ItemTitle>\n        <Typography>{item.description}</Typography>\n        <Typography color=\"text.secondary\">Категория: {item.type}</Typography>\n\n        <EditButton variant=\"contained\" onClick={handleEdit}>\n          Редактировать\n        </EditButton>\n      </ItemCard>\n    </ItemContainer>\n  );\n}\n\nexport default ItemPage;\n */\n////////////////////////////////////////////////\n/* import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ItemContainer, ItemCard, ItemTitle, EditButton } from \"../styles/itemStyles\";\nimport { Typography, TextField, Button, Select, MenuItem } from \"@mui/material\";\n\nfunction ItemPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [item, setItem] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({});\n\n  useEffect(() => {\n    fetch(`/items/${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        setItem(data);\n        setFormData(data);\n      });\n  }, [id]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n  };\n\n  const handleCancel = () => {\n    setIsEditing(false);\n    setFormData(item); // Отменяем изменения\n  };\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSave = () => {\n    fetch(`/items/${id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData),\n    })\n      .then((res) => res.json())\n      .then((updatedItem) => {\n        setItem(updatedItem);\n        setIsEditing(false);\n      });\n  };\n\n  if (!item) return <Typography align=\"center\">Загрузка...</Typography>;\n\n  return (\n    <ItemContainer>\n      <ItemCard>\n        {isEditing ? (\n          <>\n            <TextField fullWidth label=\"Название\" name=\"name\" value={formData.name} onChange={handleChange} required />\n            <TextField\n              fullWidth\n              label=\"Описание\"\n              name=\"description\"\n              value={formData.description}\n              onChange={handleChange}\n              multiline\n              rows={3}\n              required\n            />\n            <TextField fullWidth label=\"Локация\" name=\"location\" value={formData.location} onChange={handleChange} required />\n\n            <Select fullWidth name=\"type\" value={formData.type} onChange={handleChange} required>\n              <MenuItem value=\"Недвижимость\">Недвижимость</MenuItem>\n              <MenuItem value=\"Авто\">Авто</MenuItem>\n              <MenuItem value=\"Услуги\">Услуги</MenuItem>\n            </Select>\n\n            {formData.type === \"Недвижимость\" && (\n              <>\n                <TextField fullWidth label=\"Тип недвижимости\" name=\"propertyType\" value={formData.propertyType} onChange={handleChange} />\n                <TextField fullWidth label=\"Площадь (м²)\" name=\"area\" type=\"number\" value={formData.area} onChange={handleChange} />\n                <TextField fullWidth label=\"Количество комнат\" name=\"rooms\" type=\"number\" value={formData.rooms} onChange={handleChange} />\n                <TextField fullWidth label=\"Цена (₽)\" name=\"price\" type=\"number\" value={formData.price} onChange={handleChange} />\n              </>\n            )}\n\n            {formData.type === \"Авто\" && (\n              <>\n                <TextField fullWidth label=\"Марка\" name=\"brand\" value={formData.brand} onChange={handleChange} />\n                <TextField fullWidth label=\"Модель\" name=\"model\" value={formData.model} onChange={handleChange} />\n                <TextField fullWidth label=\"Год выпуска\" name=\"year\" type=\"number\" value={formData.year} onChange={handleChange} />\n                <TextField fullWidth label=\"Пробег (км)\" name=\"mileage\" type=\"number\" value={formData.mileage} onChange={handleChange} />\n              </>\n            )}\n\n            {formData.type === \"Услуги\" && (\n              <>\n                <TextField fullWidth label=\"Тип услуги\" name=\"serviceType\" value={formData.serviceType} onChange={handleChange} />\n                <TextField fullWidth label=\"Опыт (лет)\" name=\"experience\" type=\"number\" value={formData.experience} onChange={handleChange} />\n                <TextField fullWidth label=\"Стоимость (₽)\" name=\"cost\" type=\"number\" value={formData.cost} onChange={handleChange} />\n                <TextField fullWidth label=\"График работы\" name=\"workSchedule\" value={formData.workSchedule} onChange={handleChange} />\n              </>\n            )}\n\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\n              Сохранить\n            </Button>\n            <Button variant=\"outlined\" color=\"secondary\" onClick={handleCancel} sx={{ ml: 1 }}>\n              Отмена\n            </Button>\n          </>\n        ) : (\n          <>\n            <ItemTitle>{item.name}</ItemTitle>\n            <Typography>{item.description}</Typography>\n            <Typography color=\"text.secondary\">Категория: {item.type}</Typography>\n\n            {item.type === \"Недвижимость\" && (\n              <>\n                <Typography>Тип: {item.propertyType}</Typography>\n                <Typography>Площадь: {item.area} м²</Typography>\n                <Typography>Комнат: {item.rooms}</Typography>\n                <Typography>Цена: {item.price} ₽</Typography>\n              </>\n            )}\n\n            {item.type === \"Авто\" && (\n              <>\n                <Typography>Марка: {item.brand}</Typography>\n                <Typography>Модель: {item.model}</Typography>\n                <Typography>Год: {item.year}</Typography>\n                <Typography>Пробег: {item.mileage} км</Typography>\n              </>\n            )}\n\n            {item.type === \"Услуги\" && (\n              <>\n                <Typography>Тип услуги: {item.serviceType}</Typography>\n                <Typography>Опыт: {item.experience} лет</Typography>\n                <Typography>Стоимость: {item.cost} ₽</Typography>\n                <Typography>График: {item.workSchedule}</Typography>\n              </>\n            )}\n\n            <EditButton variant=\"contained\" onClick={handleEdit}>\n              Редактировать\n            </EditButton>\n          </>\n        )}\n      </ItemCard>\n    </ItemContainer>\n  );\n}\n\nexport default ItemPage;\n */\n\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { ItemContainer, ItemCard, ItemTitle, StyledButton } from \"../styles/itemStyles\";\nimport { Typography } from \"@mui/material\";\nimport { BaseFields } from \"../components/BaseFields\";\nimport { RealEstateFields, AutoFields, ServiceFields } from \"../components/AdditionalFields\";\nimport { ActionButtons } from \"../components/ActionButtons\";\nimport { EditItemButton } from \"../components/EditButton\";\n\nfunction ItemPage() {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const [item, setItem] = useState(null);\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({});\n\n  useEffect(() => {\n    fetch(`/items/${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        setItem(data);\n        setFormData(data);\n      });\n  }, [id]);\n\n  const handleEdit = () => setIsEditing(true);\n  const handleCancel = () => {\n    setIsEditing(false);\n    setFormData(item);\n  };\n\n  const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const handleSave = () => {\n    fetch(`/items/${id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData),\n    })\n      .then((res) => res.json())\n      .then((updatedItem) => {\n        setItem(updatedItem);\n        setIsEditing(false);\n      });\n  };\n\n  if (!item) return <Typography align=\"center\">Загрузка...</Typography>;\n\n  return (\n    <ItemContainer>\n      <ItemCard>\n        {isEditing ? (\n          <>\n            {/* 🔹 Общие поля */}\n            <BaseFields formData={formData} handleChange={handleChange} />\n\n            {/* 🔹 Специфичные поля для разных категорий */}\n            {formData.type === \"Недвижимость\" && <RealEstateFields formData={formData} handleChange={handleChange} />}\n            {formData.type === \"Авто\" && <AutoFields formData={formData} handleChange={handleChange} />}\n            {formData.type === \"Услуги\" && <ServiceFields formData={formData} handleChange={handleChange} />}\n\n            {/* 🔹 Кнопки \"Сохранить\" и \"Отмена\" */}\n            <ActionButtons handleSave={handleSave} handleCancel={handleCancel} />\n          </>\n        ) : (\n          <>\n            <ItemTitle>{item.name}</ItemTitle>\n            <Typography>{item.description}</Typography>\n            <Typography color=\"text.secondary\">Категория: {item.type}</Typography>\n\n            {item.type === \"Недвижимость\" && <RealEstateFields formData={item} handleChange={() => {}} />}\n            {item.type === \"Авто\" && <AutoFields formData={item} handleChange={() => {}} />}\n            {item.type === \"Услуги\" && <ServiceFields formData={item} handleChange={() => {}} />}\n\n            {/* 🔹 Кнопка \"Редактировать\" */}\n            <EditItemButton handleEdit={handleEdit} />\n          </>\n        )}\n      </ItemCard>\n    </ItemContainer>\n  );\n}\n\nexport default ItemPage;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}