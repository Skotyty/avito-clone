{"ast":null,"code":"var _jsxFileName = \"/home/skot/projects/avito/client/src/pages/FormPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import { FormContainer, FormCard, FormTitle, FormWrapper, ImagePreview, UploadButton } from \"../styles/formStyles\"; \n// import { uploadImage } from \"../utils/uploadService\";\n// import { FormFields } from \"../components/FormFields\";\n// import FormActions from \"../components/FormActions\";\n// import BackToHomeButton from \"../components/BackToHomeButton\";\n// import { EMPTY_FORM_DATA } from \"../constants\"; // ✅ Импортируем константы\n\n// const FormPage = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const existingData = location.state?.item || null;\n\n//   const [formData, setFormData] = useState(EMPTY_FORM_DATA); // ✅ Используем константу\n\n//   useEffect(() => {\n//     if (existingData) {\n//       setFormData(existingData);\n//     }\n//   }, [existingData]);\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleImageUpload = async (e) => {\n//     const file = e.target.files[0];\n//     if (!file) return;\n\n//     const imageUrl = await uploadImage(file);\n//     setFormData({ ...formData, image: imageUrl });\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     fetch(existingData ? `/items/${existingData.id}` : \"/items\", {\n//       method: existingData ? \"PUT\" : \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(formData),\n//     }).then(() => navigate(\"/list\"));\n//   };\n\n//   return (\n//     <FormWrapper> \n//       <FormContainer>\n//         <FormCard>\n//           <FormTitle>{existingData ? \"Редактировать объявление\" : \"Разместить объявление\"}</FormTitle>\n\n//           <form onSubmit={handleSubmit}>\n//             <FormFields formData={formData} handleChange={handleChange} />\n\n//             {formData.image && <ImagePreview src={formData.image} alt=\"Превью\" />}\n\n//             <UploadButton variant=\"contained\" component=\"label\">\n//               {formData.image ? \"Изменить фото\" : \"Добавить фото\"}\n//               <input type=\"file\" hidden onChange={handleImageUpload} />\n//             </UploadButton>\n\n//             <FormActions />\n//           </form>\n//         </FormCard>\n//       </FormContainer>\n\n//       <BackToHomeButton />\n//     </FormWrapper>\n//   );\n// };\n\n// export default FormPage;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { FormContainer, FormCard, FormTitle, FormWrapper, ImagePreview, UploadButton } from \"../styles/formStyles\";\nimport { uploadImage } from \"../utils/uploadService\";\nimport { FormFields } from \"../components/FormFields\";\nimport FormActions from \"../components/FormActions\";\nimport BackToHomeButton from \"../components/BackToHomeButton\";\nimport { EMPTY_FORM_DATA } from \"../constants\"; // ✅ Импортируем константы\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormPage = () => {\n  _s();\n  var _location$state;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const existingData = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.item) || null;\n  const [formData, setFormData] = useState(EMPTY_FORM_DATA);\n  const [isFormChanged, setIsFormChanged] = useState(false); // ✅ Стейт для кнопки\n\n  useEffect(() => {\n    if (existingData) {\n      setFormData(existingData);\n    }\n  }, [existingData]);\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    setIsFormChanged(true); // ✅ Фиксируем изменение\n  };\n  const handleImageUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    const imageUrl = await uploadImage(file);\n    setFormData({\n      ...formData,\n      image: imageUrl\n    });\n    setIsFormChanged(true); // ✅ Фиксируем изменение\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetch(existingData ? `/items/${existingData.id}` : \"/items\", {\n      method: existingData ? \"PUT\" : \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(formData)\n    }).then(() => navigate(\"/list\"));\n  };\n  return /*#__PURE__*/_jsxDEV(FormWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(FormContainer, {\n      children: /*#__PURE__*/_jsxDEV(FormCard, {\n        children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n          children: existingData ? \"Редактировать объявление\" : \"Разместить объявление\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormFields, {\n            formData: formData,\n            handleChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), formData.image && /*#__PURE__*/_jsxDEV(ImagePreview, {\n            src: formData.image,\n            alt: \"\\u041F\\u0440\\u0435\\u0432\\u044C\\u044E\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(UploadButton, {\n            variant: \"contained\",\n            component: \"label\",\n            children: [formData.image ? \"Изменить фото\" : \"Добавить фото\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              hidden: true,\n              onChange: handleImageUpload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormActions, {\n            isFormChanged: isFormChanged\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BackToHomeButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(FormPage, \"tscvakl5beI/qmLFksu/u2WcRk4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = FormPage;\nexport default FormPage;\nvar _c;\n$RefreshReg$(_c, \"FormPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","FormContainer","FormCard","FormTitle","FormWrapper","ImagePreview","UploadButton","uploadImage","FormFields","FormActions","BackToHomeButton","EMPTY_FORM_DATA","jsxDEV","_jsxDEV","FormPage","_s","_location$state","navigate","location","existingData","state","item","formData","setFormData","isFormChanged","setIsFormChanged","handleChange","e","target","name","value","handleImageUpload","file","files","imageUrl","image","handleSubmit","preventDefault","fetch","id","method","headers","body","JSON","stringify","then","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","src","alt","variant","component","type","hidden","onChange","_c","$RefreshReg$"],"sources":["/home/skot/projects/avito/client/src/pages/FormPage.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import { FormContainer, FormCard, FormTitle, FormWrapper, ImagePreview, UploadButton } from \"../styles/formStyles\"; \n// import { uploadImage } from \"../utils/uploadService\";\n// import { FormFields } from \"../components/FormFields\";\n// import FormActions from \"../components/FormActions\";\n// import BackToHomeButton from \"../components/BackToHomeButton\";\n// import { EMPTY_FORM_DATA } from \"../constants\"; // ✅ Импортируем константы\n\n// const FormPage = () => {\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   const existingData = location.state?.item || null;\n\n//   const [formData, setFormData] = useState(EMPTY_FORM_DATA); // ✅ Используем константу\n\n//   useEffect(() => {\n//     if (existingData) {\n//       setFormData(existingData);\n//     }\n//   }, [existingData]);\n\n//   const handleChange = (e) => {\n//     setFormData({ ...formData, [e.target.name]: e.target.value });\n//   };\n\n//   const handleImageUpload = async (e) => {\n//     const file = e.target.files[0];\n//     if (!file) return;\n\n//     const imageUrl = await uploadImage(file);\n//     setFormData({ ...formData, image: imageUrl });\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     fetch(existingData ? `/items/${existingData.id}` : \"/items\", {\n//       method: existingData ? \"PUT\" : \"POST\",\n//       headers: { \"Content-Type\": \"application/json\" },\n//       body: JSON.stringify(formData),\n//     }).then(() => navigate(\"/list\"));\n//   };\n\n//   return (\n//     <FormWrapper> \n//       <FormContainer>\n//         <FormCard>\n//           <FormTitle>{existingData ? \"Редактировать объявление\" : \"Разместить объявление\"}</FormTitle>\n\n//           <form onSubmit={handleSubmit}>\n//             <FormFields formData={formData} handleChange={handleChange} />\n\n//             {formData.image && <ImagePreview src={formData.image} alt=\"Превью\" />}\n\n//             <UploadButton variant=\"contained\" component=\"label\">\n//               {formData.image ? \"Изменить фото\" : \"Добавить фото\"}\n//               <input type=\"file\" hidden onChange={handleImageUpload} />\n//             </UploadButton>\n\n//             <FormActions />\n//           </form>\n//         </FormCard>\n//       </FormContainer>\n\n//       <BackToHomeButton />\n//     </FormWrapper>\n//   );\n// };\n\n// export default FormPage;\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { FormContainer, FormCard, FormTitle, FormWrapper, ImagePreview, UploadButton } from \"../styles/formStyles\"; \nimport { uploadImage } from \"../utils/uploadService\";\nimport { FormFields } from \"../components/FormFields\";\nimport FormActions from \"../components/FormActions\";\nimport BackToHomeButton from \"../components/BackToHomeButton\";\nimport { EMPTY_FORM_DATA } from \"../constants\"; // ✅ Импортируем константы\n\nconst FormPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const existingData = location.state?.item || null;\n\n  const [formData, setFormData] = useState(EMPTY_FORM_DATA);\n  const [isFormChanged, setIsFormChanged] = useState(false); // ✅ Стейт для кнопки\n\n  useEffect(() => {\n    if (existingData) {\n      setFormData(existingData);\n    }\n  }, [existingData]);\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n    setIsFormChanged(true); // ✅ Фиксируем изменение\n  };\n\n  const handleImageUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    const imageUrl = await uploadImage(file);\n    setFormData({ ...formData, image: imageUrl });\n    setIsFormChanged(true); // ✅ Фиксируем изменение\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    fetch(existingData ? `/items/${existingData.id}` : \"/items\", {\n      method: existingData ? \"PUT\" : \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(formData),\n    }).then(() => navigate(\"/list\"));\n  };\n\n  return (\n    <FormWrapper> \n      <FormContainer>\n        <FormCard>\n          <FormTitle>{existingData ? \"Редактировать объявление\" : \"Разместить объявление\"}</FormTitle>\n\n          <form onSubmit={handleSubmit}>\n            <FormFields formData={formData} handleChange={handleChange} />\n\n            {formData.image && <ImagePreview src={formData.image} alt=\"Превью\" />}\n\n            <UploadButton variant=\"contained\" component=\"label\">\n              {formData.image ? \"Изменить фото\" : \"Добавить фото\"}\n              <input type=\"file\" hidden onChange={handleImageUpload} />\n            </UploadButton>\n\n            {/* ✅ Передаём `isFormChanged` в кнопку */}\n            <FormActions isFormChanged={isFormChanged} />\n          </form>\n        </FormCard>\n      </FormContainer>\n\n      <BackToHomeButton />\n    </FormWrapper>\n  );\n};\n\nexport default FormPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}